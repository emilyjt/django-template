version: "3"

networks:
  ## This network will be used to enable all our services to talk together, this is normally
  ## done by default, but as you are likely to use a reverse proxy to this service, we will need to manually
  ## declare the network, so that the reverse proxy declarations will work also.
  ## I suggest, if you are using Traefik, to check out the traefik compose provided.
  production_django:

volumes:
  production_postgres_data: {}
  production_staticfiles: {}
  production_mediafiles: {}

services:
  # -------------------------------------------------------
  # Django
  # -------------------------------------------------------
  django:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
      args:
        REQUIREMENTS: requirements.txt # this is the name of the requirements file you wish to be installed
    command: >
      sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 2 --threads 2
      "
    depends_on:
      - postgres
    env_file:
      - ./.envs/production/.django
      - ./.envs/production/.postgres
    image: django_template_production_django
    networks:
      - production_django
    restart: unless-stopped
    volumes:
      - production_staticfiles:/home/app/django/staticfiles:z # :z marks the volume as shared
      - production_mediafiles:/home/app/django/mediafiles:z # :z marks the volume as shared
  # -------------------------------------------------------
  # Postgres
  # -------------------------------------------------------
  postgres:
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
      args:
        POSTGRES_VERSION: ${POSTGRES_VERSION} # this is found in the .env file
    env_file:
      - ./.envs/production/.postgres
    image: django_template_production_postgres
    networks:
      - production_django
    restart: unless-stopped
    volumes:
      - production_postgres_data:/var/lib/postgresql/data/:Z # :Z marks the volume as private
  # -------------------------------------------------------
  # Nginx
  # -------------------------------------------------------
  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
      args:
        NGINX_VERSION: ${NGINX_VERSION} # this is found in the .env file
        CONF_FILE: nginx-standalone.conf
    depends_on:
      - django
    image: django_template_production_nginx
    networks:
      - production_django
    ports:
      - "80:80"
    restart: unless-stopped
    volumes:
      - production_staticfiles:/home/app/django/staticfiles:z # :z marks the volume as shared
      - production_mediafiles:/home/app/django/mediafiles:z # :z marks the volume as shared
